[{"/Users/hilal/Documents/GitHub/quiz-fe/quiz-fe/src/index.js":"1","/Users/hilal/Documents/GitHub/quiz-fe/quiz-fe/src/App.js":"2","/Users/hilal/Documents/GitHub/quiz-fe/quiz-fe/src/reportWebVitals.js":"3","/Users/hilal/Documents/GitHub/quiz-fe/quiz-fe/src/components/Body.jsx":"4","/Users/hilal/Documents/GitHub/quiz-fe/quiz-fe/src/components/NavBar.jsx":"5"},{"size":500,"mtime":1610096547386,"results":"6","hashOfConfig":"7"},{"size":366,"mtime":1676047148121,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1610096547387,"results":"9","hashOfConfig":"7"},{"size":11737,"mtime":1676073403900,"results":"10","hashOfConfig":"7"},{"size":743,"mtime":1672739306420,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"u2zc85",{"filePath":"15","messages":"16","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"/Users/hilal/Documents/GitHub/quiz-fe/quiz-fe/src/index.js",[],["25","26"],"/Users/hilal/Documents/GitHub/quiz-fe/quiz-fe/src/App.js",["27","28","29","30"],"import React from \"react\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport \"./css/quiz.css\"\nimport {Container, Row, Col} from \"react-bootstrap\"\nimport NavBar from \"./components/NavBar\"\nimport Body from \"./components/Body\"\n\n\nfunction App() {\n  return (\n    <div >\n  <>\n\n  \n    \n      <Body />\n     \n \n        \n      \n    </>\n    </div>\n  );\n}\n\nexport default App;","/Users/hilal/Documents/GitHub/quiz-fe/quiz-fe/src/reportWebVitals.js",[],"/Users/hilal/Documents/GitHub/quiz-fe/quiz-fe/src/components/Body.jsx",["31","32","33"],"import React from \"react\";\nimport { Container, Button, Form, Row, Col, Image } from \"react-bootstrap\";\nimport { GiTrophyCup } from \"react-icons/gi\";\nimport { SiTimescale } from \"react-icons/si\";\nimport { MdReplay} from \"react-icons/md\";\n\n// -in the first page there should be name and start buttton\n// -start fires function-fetch/post-start &retrieves - first question\n// -2nd page the should be question, answers, next button\n// -next button  className=\"shadow\"fires function -fetch/post-answer id &retrieves - 2nd question\n// -last page there should be score page\n\nclass Body extends React.Component {\n  state = {\n    quoNum: 1,\n    intervalId: 0,\n    remainingTime: 10,\n    timeOut: false,\n    questions: [],\n    start: \"pre\",\n    examInfo: [],\n    body: {\n      candidateName: \"\",\n    },\n    loading: false,\n    errMessage: \"\",\n    answers: {\n      question: 0,\n      answer: null,\n    },\n    score: 0,\n  };\n\n  componentDidMount = () => {\n    const myTimeout = setTimeout(() => this.setState({ start: \"false\" }), 5000);\n  };\n  updateField = (e) => {\n    let body = { ...this.state.body };\n    let currentid = e.currentTarget.id;\n    console.log(e.currentTarget.id);\n\n    body[currentid] = e.currentTarget.value;\n    this.setState({ body: body });\n  };\n\n  fetch = async () => {\n    try {\n      const url = process.env.REACT_APP_Url;\n      //const url = \"http://localhost:3005/exams\";\n      let response = await fetch(`${url}/start`, {\n        method: \"POST\",\n        body: JSON.stringify(this.state.body),\n        headers: new Headers({\n          \"Content-Type\": \"application/json\",\n        }),\n      });\n      console.log(response);\n      if (response.ok) {\n        let examInfo = await response.json();\n        let questions = examInfo.questions;\n        this.setState({ remainingTime: examInfo.totalDuration });\n        console.log(\"examInfo:\", questions, examInfo);\n\n        return examInfo;\n      } else {\n        console.log(\"an error occurred\");\n        let error = await response.json();\n        this.setState({\n          errMessage: error.message,\n          loading: false,\n        });\n      }\n    } catch (e) {\n      console.log(e); // Error\n      this.setState({\n        errMessage: e.message,\n        loading: false,\n      });\n    }\n  };\n\n  afterSubmit = () => {\n    let newIntervalId;\n    if (this.state.remainingTime > 0) {\n      newIntervalId = setInterval(() => {\n        this.timer();\n      }, 1000);\n    }\n    this.setState({ intervalId: newIntervalId });\n\n    this.getQuestions();\n  };\n\n  submitForm = (e) => {\n    e.preventDefault();\n    this.setState({ loading: true });\n    const myTimeout = setTimeout(() => this.afterSubmit(e), 2500);\n  };\n  manageState = (examInfo) => {\n    this.setState({\n      examInfo: examInfo,\n      questions: examInfo.questions,\n      start: \"true\",\n    });\n  };\n  getQuestions = async () => {\n    let examInfo = await this.fetch();\n    this.manageState(examInfo);\n  };\n\n  next = async (e) => {\n    let answers = { ...this.state.answers };\n    answers.answer = parseInt(e.currentTarget.value);\n    this.setState({ answers: answers });\n  };\n\n  getResults = async () => {\n    clearInterval(this.state.intervalId);\n    const url = process.env.REACT_APP_Url;\n    //const url = `http://localhost:3005/exams`;\n    let response = await fetch(`${url}/${this.state.examInfo._id}`);\n    let examInfo = await response.json();\n    console.log(examInfo, this.state.remainingTime);\n    this.setState({ score: examInfo,start: \"finish\",  });\n  };\n  nextQuo = async () => {\n    try {\n      const url = process.env.REACT_APP_Url;\n      let quoNum = this.state.quoNum;\n      //const url = `http://localhost:3005/exams`;\n      let response = await fetch(`${url}/${this.state.examInfo._id}/answer`, {\n        method: \"POST\",\n        body: JSON.stringify(this.state.answers),\n        headers: new Headers({\n          \"Content-Type\": \"application/json\",\n        }),\n      });\n      console.log(response);\n      if (response.ok) {\n        let questionIndex = this.state.answers.question;\n        let answers = { ...this.state.answers };\n        if (questionIndex === this.state.questions.length - 1) {\n          this.getResults();\n     \n         \n        } else {\n          questionIndex += 1;\n          answers.question = questionIndex;\n          answers.answer = null;\n          this.setState({ answers: answers, quoNum: quoNum + 1 });\n          console.log(\"answers\", this.state.answers);\n        }\n      } else {\n        console.log(\"an error occurred\");\n        let error = await response.json();\n        this.setState({\n          errMessage: error.message,\n          loading: false,\n        });\n      }\n    } catch (e) {\n      console.log(e); // Error\n      this.setState({\n        errMessage: e.message,\n        loading: false,\n      });\n    }\n  };\n  timer = () => {\n    let remainingTime = this.state.remainingTime;\n\n    this.setState({ remainingTime: remainingTime - 1 });\n\n    if (this.state.remainingTime === 0) {\n\n      this.getResults();\n      this.setState({ timeOut: true });\n    }\n  };\n\n  render() {\n    return (\n      <Container className=\"  main app my-5   \">\n        {this.state.start === \"true\" && (\n          <div className=\"  d-flex quoNum p-2\">\n            Question {this.state.quoNum} of {this.state.questions.length}\n            <div className=\" timer d-inline ml-auto text-center\">\n              {this.state.remainingTime}\n            </div>\n          </div>\n        )}\n        {this.state.start === \"pre\" && (\n          <div className=\" answers  quiz  align-items-center justify-content-center  text-center my-5\">\n            <Row className=\"my-5 \">\n              <Col >\n                <div>\n                  {\" \"}\n                  <h1>QUIZ GAME</h1>\n                </div>\n              </Col>\n            </Row>\n          </div>\n        )}\n\n        {this.state.start === \"false\" && (\n          <div className=\"answers   align-items-center justify-content-center  text-center my-5\">\n            <Row >\n              <Col >\n                <div\n                  className={this.state.loading ? \"loading wrapper\" : \"wrapper\"}\n                >\n                  {\" \"}\n                  <svg\n                    className=\"svg\"\n                    width=\"100px\"\n                    height=\"100px\"\n                    viewBox=\"0 0 100 100\"\n                  >\n                    <circle className=\"circle\" cx=\"50\" cy=\"50\" r=\"48\" />\n                  </svg>\n                  <div className=\"dots\">\n                    <div></div>\n                    <div></div>\n                    <div></div>\n                  </div>\n                </div>\n                <Form className=\"submitForm\" onSubmit={this.submitForm}>\n                  <Form.Group controlId=\"name\">\n                    <Form.Label>Your Name & Surname </Form.Label>\n                    <Form.Control\n                      id=\"candidateName\"\n                      type=\"text\"\n                      placeholder=\"Enter your name please\"\n                      value={this.state.body.candidateName}\n                      onChange={this.updateField}\n                      className=\"form-control-sm\"\n                    />\n                  </Form.Group>\n                  {this.state.body.candidateName && (\n                    <div className=\"btn-start \"> <Button className=\"shadow \" type=\"submit\">\n                    Start\n                   </Button></div>\n                   \n                  )}\n                </Form>\n              </Col>\n            </Row>\n          </div>\n        )}\n\n        {this.state.start === \"true\" && (\n          <div className=\"questions-wrapper\">\n            <div className=\"question my-2\">\n              {this.state.questions[this.state.answers.question].text}\n              {/* {!this.state.questions[this.state.answers.question].img === null && <Image src=\"holder.js/171x180\" rounded />} */}\n            </div>\n            <div className=\"answers  align-items-center justify-content-center  text-center my-5 \">\n              <Row className=\"my-5\">\n                <Col xs={12} md={6}>\n                  <Button value=\"0\" onClick={this.next} className=\"shadow btn-block\">\n                    {\n                      this.state.questions[this.state.answers.question]\n                        .answers[0].text\n                    }\n                  </Button>{\" \"}\n                </Col>\n                <Col xs={12} md={6}>\n                  <Button value=\"1\" onClick={this.next} className=\"shadow btn-block\">\n                    {\n                      this.state.questions[this.state.answers.question]\n                        .answers[1].text\n                    }\n                  </Button>{\" \"}\n                </Col>\n                <Col xs={12} md={6}>\n                  <Button value=\"2\" onClick={this.next} className=\"shadow  btn-block\">\n                    {\n                      this.state.questions[this.state.answers.question]\n                        .answers[2].text\n                    }\n                  </Button>{\" \"}\n                </Col>\n                <Col xs={12} md={6}>\n                  <Button value=\"3\" onClick={this.next} className=\"shadow btn-block\">\n                    {\n                      this.state.questions[this.state.answers.question]\n                        .answers[3].text\n                    }\n                  </Button>{\" \"}\n                </Col>\n              </Row>\n            </div>\n            {this.state.answers.answer != null && (\n              <div className=\"  text-center my-3 abs-btn \">\n                <Button onClick={this.nextQuo} className=\" shadow\">\n                  Next{\" \"}\n                </Button>\n              </div>\n            )}\n          </div>\n        )}\n        {this.state.start === \"finish\" && (\n          <div>\n            <div className=\" flex-flow-column align-items-center justify-content-center  text-center my-5 \">\n              <div className=\"finish\">\n                {this.state.timeOut === false ? (\n                  <div>\n                    <h1 className=\"d-block\">\"Finished\"</h1>\n\n                    <div className=\"my-3 \">\n                      <GiTrophyCup\n                        style={{\n                          fontSize: \"100px\",\n                          color: \"#DD6E42\",\n                          textShadow: \"20px 20px 50px yellow\",\n                        }}\n                      />\n                    </div>\n                  </div>\n                ) : (\n                  <div>\n                    <h1 className=\"d-block\">\"Ooopss... Time is out \"</h1>\n                    <div className=\"my-3 \">\n                      <SiTimescale\n                        style={{\n                          fontSize: \"100px\",\n                          color: \"#DD6E42\",\n                          textShadow: \"20px 20px 50px yellow\",\n                        }}\n                      />\n                    </div>\n                  </div>\n                )}\n              </div>\n              <div className=\"score\">\n              <h3>Your Score </h3>\n              <h1 className=\"bold\"> {this.state.score.totalScore}</h1>\n              </div>\n            </div>\n            <div className=\"d-flex flex-flow-column align-items-center justify-content-center  text-center my-3 \">\n            \n              <Button\n                className=\"shadow \"\n                onClick={() => window.location.reload(false)}\n              >\n                \n              Replay <MdReplay   style={{\n                          fontSize: \"20px\",\n                          color: \"#DD6E42\",\n                          textShadow: \"20px 20px 50px yellow\",\n                        }} />\n              </Button>\n            </div>\n          </div>\n        )}\n      </Container>\n    );\n  }\n}\nexport default Body;\n","/Users/hilal/Documents/GitHub/quiz-fe/quiz-fe/src/components/NavBar.jsx",[],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":4,"column":9,"nodeType":"40","messageId":"41","endLine":4,"endColumn":18},{"ruleId":"38","severity":1,"message":"42","line":4,"column":20,"nodeType":"40","messageId":"41","endLine":4,"endColumn":23},{"ruleId":"38","severity":1,"message":"43","line":4,"column":25,"nodeType":"40","messageId":"41","endLine":4,"endColumn":28},{"ruleId":"38","severity":1,"message":"44","line":5,"column":8,"nodeType":"40","messageId":"41","endLine":5,"endColumn":14},{"ruleId":"38","severity":1,"message":"45","line":2,"column":45,"nodeType":"40","messageId":"41","endLine":2,"endColumn":50},{"ruleId":"38","severity":1,"message":"46","line":35,"column":11,"nodeType":"40","messageId":"41","endLine":35,"endColumn":20},{"ruleId":"38","severity":1,"message":"46","line":97,"column":11,"nodeType":"40","messageId":"41","endLine":97,"endColumn":20},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","'Row' is defined but never used.","'Col' is defined but never used.","'NavBar' is defined but never used.","'Image' is defined but never used.","'myTimeout' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]